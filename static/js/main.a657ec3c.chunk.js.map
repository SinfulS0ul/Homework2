{"version":3,"sources":["components/ToDoList/index.js","components/ToDoList/ToDoList.js","components/Tasks/index.js","components/Tasks/Tasks.js","components/App/index.js","components/App/App.js","serviceWorker.js","index.js"],"names":["ToDoList","this","props","textInput","current","focus","react_default","a","createElement","className","onSubmit","addTask","autoComplete","name","placeholder","ref","onChange","handleInputChange","Button","type","bsStyle","reactstrap_es","id","label","value","checked","sortByDate","Component","Tasks","confirmTasks","task","key","date","onClick","e","_this","checkLikeDone","done","text","concat","dateToDo","getMonth","getDate","getFullYear","getHours","getMinutes","deleteTask","displayedTasks","doneTasks","undoneTasks","arr","filter","sort","b","entries","taskList","map","App","state","tasks","taskText","Date","highlightedDates","React","createRef","preventDefault","newTask","newDateToDo","setState","Object","toConsumableArray","newTasks","target","now","defineProperty","handleDateChange","es","selected","highlightDates","showTimeSelect","timeFormat","timeIntervals","dateFormat","timeCaption","components_ToDoList","components_Tasks","Boolean","window","location","hostname","match","ReactDOM","render","components_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.a657ec3c.chunk.js","sourcesContent":["import ToDoList from './ToDoList';\n\nexport default ToDoList;","import React, { Component } from 'react';\nimport { Button } from 'react-bootstrap';\nimport { CustomInput } from 'reactstrap';\nimport './ToDoList.css';\n\nclass ToDoList extends Component {\n\n  componentDidMount() {\n    this.props.textInput.current.focus();\n  }\n  \n  componentDidUpdate() {\n    this.props.textInput.current.focus();\n  }\n\n  render() {\n    return(\n      <div>\n        <form className=\"d-flex flex-column align-items-center bg-light\" onSubmit={this.props.addTask}>\n          <input \n            autoComplete=\"off\"\n            className=\"w-100\"\n            name=\"taskText\"\n            placeholder=\"Введіть задачу\" \n            ref={this.props.textInput}\n            onChange={this.props.handleInputChange}\n          />\n          <Button\n            type=\"submit\" \n            className=\"w-100\"\n            bsStyle=\"success\"\n          > Додати </Button>\n          <div\n            className=\"d-flex flex-row\"\n          >\n          <div\n           className=\"d-flex flex-column p-2 flex-fill\"\n          >\n          <CustomInput \n            name=\"doneTasks\"\n            type=\"checkbox\" \n            id=\"exampleCustomCheckbox1\" \n            label=\"Виконані задачі\" \n            onChange={this.props.handleInputChange}\n          />\n          <CustomInput \n            name=\"undoneTasks\"\n            type=\"checkbox\" \n            id=\"exampleCustomCheckbox2\" \n            label=\"Невиконані задачі\" \n            onChange={this.props.handleInputChange}\n          />\n          </div>\n          <div\n           className=\"d-flex flex-column p-2 flex-fill\"\n          >\n          <CustomInput \n            name=\"sortByDate\"\n            value=\"byLastDate\"\n            onChange={this.props.handleInputChange}\n            checked={this.props.sortByDate === 'byLastDate'}\n            type=\"radio\" \n            id=\"exampleCustomRadio1\" \n            label=\"Пріорітет за останньою\" \n          />\n          <CustomInput \n            name=\"sortByDate\"\n            value=\"byFirstDate\"\n            onChange={this.props.handleInputChange}\n            checked={this.props.sortByDate === 'byFirstDate'}\n            type=\"radio\" \n            id=\"exampleCustomRadio2\" \n            label=\"Пріорітет за першою\" \n          />\n          </div>\n          </div>\n        </form>\n      </div>\n    )\n  }\n}\n\nexport default ToDoList","import Tasks from './Tasks';\n\nexport default Tasks;","import React, { Component } from 'react';\nimport './Tasks.css';\n\nclass Tasks extends Component{\n\n  confirmTasks = task => {\n      return (\n        <li \n          className=\"d-flex flex-row\"\n          key={task.date}\n        >\n        <span\n          className=\"w-100\"\n          onClick={ e => this.props.checkLikeDone(task.date)}\n        >\n        <button\n          className=\"list-group-item list-group-item-action justify-content-between align-items-center btn\"\n        ><span\n          className={task.done? 'done' : 'undone'}\n        >{task.text} - {`${task.dateToDo.getMonth()}/${task.dateToDo.getDate()}/${task.dateToDo.getFullYear()} ${task.dateToDo.getHours()}:${task.dateToDo.getMinutes()}`}\n        </span>\n        </button>\n        </span>\n        <button \n          className=\"close\"\n          onClick={ e => this.props.deleteTask(task.date)}\n        >x</button>\n        </li>\n    );\n  }\n\n  displayedTasks = (doneTasks, undoneTasks, arr) => {\n    if(doneTasks && !undoneTasks){\n      arr = arr.filter(task => task.done);\n    }\n    else if(!doneTasks && undoneTasks){\n      arr = arr.filter(task => !task.done);\n    }\n    return arr;\n  }\n\n  sortByDate = (sortByDate, arr) => {\n    if(sortByDate === 'byLastDate')\n      arr = arr.sort((a, b) => b.date - a.date);\n    else\n      arr = arr.sort((a, b) => a.date - b.date);\n    return arr;\n  }\n\n  render() {\n    let entries = this.props.entries;\n    const doneTasks = this.props.doneTasks;\n    const undoneTasks = this.props.undoneTasks;\n    const sortByDate = this.props.sortByDate;\n    entries = this.displayedTasks(doneTasks, undoneTasks, entries)\n    entries = this.sortByDate(sortByDate, entries);\n    const taskList = entries.map(this.confirmTasks);\n    return <ul className=\"list-group\">{taskList}</ul>;\n  }\n}\n\nexport default Tasks","import App from './App';\n\nexport default App;","import React, { Component } from 'react';\nimport './App.css';\nimport './Datapicker.css';\nimport \"react-datepicker/dist/react-datepicker.css\";\nimport ToDoList from '../ToDoList'\nimport Tasks from '../Tasks';\nimport DatePicker from \"react-datepicker\";\n \nclass App extends Component {\n  \n  state = {\n    tasks: [],\n    taskText: { text: '', date: '', done: false },\n    dateToDo: new Date(),\n    highlightedDates: [],\n    doneTasks: false,\n    undoneTasks: false,\n    sortByDate: 'byLastDate'\n  }\n  \n  textInput = React.createRef();\n\n  addTask = e => {\n    e.preventDefault();\n    const newTask = {text: this.state.taskText.text, date: this.state.taskText.date, done: this.state.taskText.done, dateToDo: this.state.dateToDo};\n    const newDateToDo = this.state.dateToDo;\n    if(newTask.text !== ''){\n      this.setState({tasks: [...this.state.tasks, newTask],\n                     taskText: {text: '', date: '', done: false},\n                     highlightedDates: [...this.state.highlightedDates, newDateToDo]});\n    }\n  }\n\n  deleteTask = key => {\n    const newTasks = this.state.tasks\n      .filter(task => task.date !== key);\n    this.setState({tasks: newTasks});\n  }\n\n  handleInputChange = e => {\n    const target = e.target;\n    const value = target.type === 'checkbox'? target.checked\n                   : target.type === 'radio'? target.value \n                   : { text: target.value, date: Date.now(), done: false };\n    const name = target.name;\n    this.setState({\n        [name]: value\n    });\n  }\n\n  handleDateChange = date => {\n    this.setState({dateToDo: date});\n  }\n\n  checkLikeDone = key => {\n    const newTasks = this.state.tasks\n      .map(task => task.date !== key? task : {text: task.text, date: task.date, done: !task.done, dateToDo: task.dateToDo});\n    this.setState({tasks: newTasks});\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <DatePicker\n          selected={this.state.dateToDo}\n          onChange={this.handleDateChange}\n          highlightDates={this.state.highlightedDates}\n          showTimeSelect\n          timeFormat=\"HH:mm\"\n          timeIntervals={15}\n          dateFormat=\"MMMM d, yyyy h:mm aa\"\n          timeCaption=\"time\"\n        />\n        <ToDoList \n          addTask={this.addTask} \n          textInput={this.textInput}\n          handleInputChange={this.handleInputChange}\n          sortByDate={this.state.sortByDate}\n        />\n        <Tasks \n          entries={this.state.tasks} \n          doneTasks={this.state.doneTasks}\n          undoneTasks={this.state.undoneTasks}\n          sortByDate={this.state.sortByDate}\n          deleteTask={this.deleteTask}\n          checkLikeDone={this.checkLikeDone}\n        />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from 'components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}